# SOME DESCRIPTIVE TITLE.
# Copyright (C) Odoo S.A.
# This file is distributed under the same license as the odoo package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: odoo master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-06 10:19+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language-Team: Chinese (China) (https://www.transifex.com/odoo-cn/teams/49626/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../_extensions/autojsdoc/README.rst:5
msgid "JSDoc parser/Sphinx extension for Odoo"
msgstr ""

#: ../../_extensions/autojsdoc/README.rst:8
msgid "Why?"
msgstr ""

#: ../../_extensions/autojsdoc/README.rst:10
msgid ""
"Spent about a week trying to coerce \"standard\" javascript tools (jsdoc_ "
"with the hope of using sphinx-js_ for integration or `documentation.js`_) "
"and failed to ever get a sensible result: failed to get any result with the "
"current state of the documentation, significant changes/additions/fixes to "
"docstrings brought this up to \"garbage output\" level."
msgstr ""

#: ../../_extensions/autojsdoc/README.rst:16
msgid ""
"Bug reports and mailing list posts didn't show any path to improvement on "
"the ES5 codebase (if we ever go whole-hog on ES6 modules and classes things "
"could be different, in fact most of JSDoc's current effort seem focused on "
"ES6/ES2015 features) but both experience and looking at the mailing lists "
"told me that spending more time would be wasted."
msgstr ""

#: ../../_extensions/autojsdoc/README.rst:22
msgid ""
"Even more so as I was writing visitors/rewriters to generate documentation "
"from our existing structure, which broadly speaking is relatively strict, "
"and thus"
msgstr ""

#: ../../_extensions/autojsdoc/README.rst:27
msgid "What?"
msgstr ""

#: ../../_extensions/autojsdoc/README.rst:29
msgid ""
"If it were possible to generate JSDoc annotations from our relatively well-"
"defined code structures, it was obviously possible to extract documentary "
"information directly from it, hence this Odoo-specific package/extension "
"trying to do exactly that."
msgstr ""

#: ../../_extensions/autojsdoc/README.rst:34
msgid "This package should eventually provide:"
msgstr ""

#: ../../_extensions/autojsdoc/README.rst:36
msgid ""
"a command-line interface which can be invoked via ``-m autojsdoc`` (assuming"
" your ``PYTHONPATH`` can find it) which should allow dumping the parsed AST "
"in a convenient-ish form, possibly doing searches through the AST, a "
"dependency graph extractor/analysis and a text dumper for the documentation."
msgstr ""

#: ../../_extensions/autojsdoc/README.rst:42
msgid ""
"a sphinx extension (``autojsdoc.sphinx``) which can be used to integrate the"
" parsed JSDoc information into the Sphinx doc."
msgstr ""

#: ../../_extensions/autojsdoc/README.rst:46
msgid "How?"
msgstr ""

#: ../../_extensions/autojsdoc/README.rst:48
msgid "Sphinx-aside, the package relies on 3 libraries:"
msgstr ""

#: ../../_extensions/autojsdoc/README.rst:50
msgid ""
"pyjsparser_, an Esprima-compliant ES5.1 parser (with bits of ES6 support), "
"sadly it does not support comments in its current form so I had to fork it. "
"Fed a javascript source file, pyjsparser_ simply generates a bunch of nested"
" dicts representing an Esprima ast, ast-types_ does a reasonably good job of"
" describing it once you understand that \"bases\" are basically just "
"structural mixins."
msgstr ""

#: ../../_extensions/autojsdoc/README.rst:57
msgid ""
"Because the original does not, this package provides a ``visitor`` module "
"for pyjsparser_ ASTs."
msgstr ""

#: ../../_extensions/autojsdoc/README.rst:60
msgid ""
"pyjsdoc_, a one-file \"port\" of jsdoc, can actually do much of the JS "
"parsing (using string munging) but its core semantics don't fit our needs so"
" I'm only using it to parse the actual JSDoc content, and the ``jsdoc`` "
"module contains some replacement classes, extensions & monkey patches for "
"things `pyjsdoc`_ itself does not support, at the time of this writing:"
msgstr ""

#: ../../_extensions/autojsdoc/README.rst:66
msgid "a bug in FunctionDoc.return_val"
msgstr ""

#: ../../_extensions/autojsdoc/README.rst:67
msgid "a type on FunctionDoc so it's compatible with ParamDoc"
msgstr ""

#: ../../_extensions/autojsdoc/README.rst:68
msgid "a more reliable comments-parsing function"
msgstr ""

#: ../../_extensions/autojsdoc/README.rst:69
msgid ""
"a replacement ModuleDoc as the original does not materialise AMD modules"
msgstr ""

#: ../../_extensions/autojsdoc/README.rst:70
msgid "a ClassDoc extension to support mixins"
msgstr ""

#: ../../_extensions/autojsdoc/README.rst:71
msgid ""
"two additional CommentDoc extensions for \"namespaces\" objects (bag of "
"attributes without any more information) and mixin objects"
msgstr ""

#: ../../_extensions/autojsdoc/README.rst:74
msgid ""
"pytest_ to configure and run the test suite, which you can run by invoking "
"``pytest doc/_extensions`` from the project top-level, the tests represent "
"both \"happy path\" things we want to parse and various code patterns which "
"tripped the happy path because e.g. they were matched and should not have, "
"they were not matched and should have, or they were more complex than the "
"happy path had expected"
msgstr ""

#: ../../_extensions/autojsdoc/parser/tests/README.rst:3
msgid ""
"These files should be run via pytest_, simply install pytest and from the "
"top of the Odoo project run ``pytest doc/_extensions``."
msgstr ""
